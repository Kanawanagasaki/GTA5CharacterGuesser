@page "/guess"

@{
    var level = Data.GetLevel(_levelIndex);
    var line = Data.GetLine(_levelIndex, _lineIndex);
    var validGuess = Data.HasCharacter(_guessInput);
}

<div class='root @(
    _state switch {
        EGuessState.LevelIn => "level-in",
        EGuessState.LevelOut => "level-out",
        EGuessState.Guess => "guess",
        EGuessState.Result => "result",
        EGuessState.PreNextLevel => "pre-next-level",
        _ => ""
    })'>
    @if(!_isFinished)
    {
        <div class='header'>
            <div class="header-item">
                Level @(_levelIndex + 1), @(level.Title)
            </div>
            <div class="relative">
                <div class="absolute header-item" >
                    Line @(_lineIndex + 1)/@(level.Lines.Length)
                </div>
            </div>
            <div class="relative">
                <div class="absolute header-item">
                    Score: @(_score)
                </div>
            </div>
        </div>
        <div class="status">
            <div class="score-bar-wrapper">
                <div class="score-bar-border">
                    <div class="score-bar-red" style="width: @((double)_roundScore / (double)level.MaxScore * 100d)%;"></div>
                    <div class="score-bar" style="width: @((double)_roundScore / (double)level.MaxScore * 100d)%;"></div>
                </div>
                <div class="score-cursor" style="left: @((double)_roundScore / (double)level.MaxScore * 100d)%;">
                    @(_roundScore)p
                </div>
            </div>
            <div class="absolute">
                <div class="result-text">
                    <span class='@(_resultCorrect ? "result-correct" : "result-incorrect")'>
                        @(_resultCorrect ? "Correct" : "Incorrect")!
                    </span>
                    <span>
                        This line was said by <i>@(line.Answer)</i> !
                    </span>
                </div>
            </div>
        </div>
        <div class="quiz">
            @if(!_resultPlayVideo)
            {
                <div class="quiz-table">
                    <div class="quiz-picture-wrapper">
                        <div class="quiz-picture" style='@(_state == EGuessState.Result ? $"background-image: url(img/characters/{line.Answer.Replace(" ", "%20")}.png);" : "")'></div>
                    </div>
                    <div class="quiz-content">
                        <div class="quiz-question">
                            Who said this line:
                        </div>
                        <div class="line">
                            <code>
                                @line.Text
                            </code>
                            @if (line.Audio is not null && (_isAudioPlayed || level.AudioPenalty < _roundScore || _state == EGuessState.Result))
                            {
                                <div class="divider"></div>
                                <div class="audio-wrapper" @onclick=@OnAudioClick>
                                    <img class="audio" src=@(_isAudioPlaying ? "img/pause.png" : "img/play.png") />
                                    @if(!_isAudioPlayed && _state == EGuessState.Guess)
                                    {
                                        <span class="audio-pentalty">-@(level.AudioPenalty)p</span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="quiz-play-video-btn">
                            @if(line.Video is not null)
                            {
                                <button class="small" @onclick=@OnRevealVideo>Play video</button>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="result-video">
                    <video width="600" controls @ref=@_videoRef></video>
                    @if(_isVideoPreparing)
                    {
                        <div style="color: #dc3545;">
                            Downloading video...
                        </div>
                    }
                    <button class="small" @onclick=@(_=>_resultPlayVideo = false)>Hide video</button>
                </div>
            }
        </div>
        @if(_characterNameToGuessCount.Count > 0)
        {
            var sorted = _characterNameToGuessCount
                            .Select(x => new { Name = x.Key, Count = x.Value })
                            .OrderByDescending(x => x.Count)
                            .Take(7)
                            .ToArray();
            var total = (double)sorted.Sum(x => x.Count);
            var style = string.Join(" ", sorted.Select(x => Math.Round(x.Count / total * 100) + "fr"));
            <div>
                Chat made @(_guessedUserLogins.Count) guess@(_guessedUserLogins.Count > 1 ? "es" : "")
            </div>
            <div class="chat-guesses" style=@(sorted.Length > 0 ? $"grid-template-columns:{style};" : "")>
                @foreach(var item in sorted)
                {
                    <div>
                        @(item.Count + (_state == EGuessState.Result ? $" - {item.Name}" : ""))
                    </div>
                }
            </div>
        }
        else
        {
            <div><br/></div>
            <div><br/></div>
        }
        @if(!_resultPlayVideo)
        {
            <div class="footer">
                <div class="guess-input-wrapper">
                    <input type="text" class="guess-input" @bind=@_guessInput @bind:event="oninput" />
                    @if (!string.IsNullOrWhiteSpace(_guessInput) && !validGuess)
                    {
                        var options = Data.GetCharacterOptions(_guessInput);
                        var count = options.Count();
                        if (count > 0)
                        {
                            <div class="guess-form-hint">
                                @foreach (var option in options.Take(5))
                                {
                                    <div class="guess-form-hint-item" @onclick=@(_=>_guessInput = option)>
                                        @option
                                    </div>
                                }
                                @if (count > 5)
                                {
                                    <div class="guess-form-hint-dots">
                                        @(count - 5) hidden...
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
                <button
                    disabled=@(_state == EGuessState.Guess && !validGuess)
                    @onclick=@(async _ =>
                    {
                        if(_state == EGuessState.Guess)
                            await OnGuess();
                        else if(_state == EGuessState.Result)
                            await OnContinue();
                    })>
                    @if(_state == EGuessState.Guess)
                    {
                        <text>Guess</text>
                    }
                    else
                    {
                        <text>Continue</text>
                    }
                </button>
            </div>
        }
    }
    else
    {
        var results = _chatGuesses.Select(x => new
        {
            Name = x.Value.DisplayName,
            Color = x.Value.Color ?? "#ffffff",
            RoundsScores = x.Value.RoundsScores,
            Total = x.Value.TotalScore,
            IsMe = false
        }).ToList();
        results.Add(new
        {
            Name = "You",
            Color = "#000000",
            RoundsScores = _roundsScores,
            Total = _score,
            IsMe = true
        });
        results.Sort((a,b) => b.Total - a.Total);

        <div class="finish">
            <div class="finish-header">
                Results
            </div>
            <div class="finish-table-wrapper">
                <table class="finish-table">
                    <tr>
                        <th>Username</th>
                        @for(int i = 0; i < Data.GetLevelsAmount(); i++)
                        {
                            var lvl = Data.GetLevel(i);

                            <th>#@(i+1) @(lvl.Title)</th>
                        }
                        <th>Score</th>
                    </tr>
                    @for(int i = 0; i < results.Count; i++)
                    {
                        <tr style='@(results[i].IsMe ? "background: #ffc107; color: #000;" : "")'>
                            <td style="color: @(results[i].Color); font-weight: bold;">
                                @(results[i].Name)
                            </td>
                            @for(int j = 0; j < Data.GetLevelsAmount(); j++)
                            {
                                <td>
                                    @(results[i].RoundsScores[j])
                                </td>
                            }
                            <td>
                                @(results[i].Total)
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
</div>
